Terminals unused in grammar

   "constante real"


State 7 conflicts: 2 shift/reduce
State 11 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: class_def

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}'

    3 optional_field_decl_list: field_decl_list
    4                         | /* empty */

    5 optional_method_decl_list: method_decl_list
    6                          | /* empty */

    7 field_decl_list: field_decl_list field_decl
    8                | field_decl

    9 method_decl_list: method_decl_list method_decl
   10                 | method_decl

   11 class_name: "'identificador'"

   12 field_decl: type var_list ';'

   13 var_list: var_list ',' var
   14         | var

   15 var: "'identificador'" optional_initialization
   16    | "'identificador'" '[' "constante entera" ']'

   17 optional_initialization: '=' constant
   18                        | /* empty */

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' block

   20 return_type: type
   21            | "'void'"

   22 opt_parameter_decl_list: parameter_decl_list
   23                        | /* empty */

   24 parameter_decl_list: parameter_decl_list ',' parameter_decl
   25                    | parameter_decl

   26 parameter_decl: type "'identificador'"

   27 block: '{' opt_statement_list '}'

   28 opt_statement_list: statement_list
   29                   | /* empty */

   30 type: "'int'"
   31     | "'boolean'"

   32 statement_list: statement_list statement
   33               | statement

   34 statement: assign ';'
   35          | method_call ';'
   36          | if_statement
   37          | while_statement
   38          | for_statement
   39          | return_statement ';'
   40          | break_statement ';'
   41          | continue_statement ';'
   42          | block

   43 assign: lvalue '=' expr

   44 method_call: method_name '(' opt_method_call_argument_list ')'
   45            | "'print'" print_argument_list
   46            | "'read'" read_argument_list

   47 method_name: "'identificador'"

   48 opt_method_call_argument_list: method_call_argument_list
   49                              | /* empty */

   50 method_call_argument_list: method_call_argument_list ',' expr
   51                          | expr

   52 print_argument_list: print_argument_list ',' print_argument
   53                    | print_argument

   54 print_argument: "constante de cadena"
   55               | expr

   56 read_argument_list: read_argument_list ',' lvalue
   57                   | lvalue

   58 lvalue: "'identificador'" opt_array_dimension

   59 opt_array_dimension: '[' expr ']'
   60                    | /* empty */

   61 if_statement: "'if'" '(' expr ')' block opt_else

   62 opt_else: "'else'" block
   63         | /* empty */

   64 while_statement: "'while'" '(' expr ')' block

   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block

   66 for_assignment_list: for_assignment_list ',' assign
   67                    | assign

   68 return_statement: "'return'" opt_expr

   69 break_statement: "'break'"

   70 continue_statement: "'continue'"

   71 opt_expr: expr
   72         | /* empty */

   73 expr: expr "operador booleano 'or'" bool_term
   74     | bool_term

   75 bool_term: bool_term "operador booleano 'and'" relational_expr
   76          | relational_expr

   77 relational_expr: relational_expr ">" bit_shift_expr
   78                | relational_expr "<" bit_shift_expr
   79                | relational_expr ">=" bit_shift_expr
   80                | relational_expr "<=" bit_shift_expr
   81                | relational_expr "==" bit_shift_expr
   82                | relational_expr "!=" bit_shift_expr
   83                | bit_shift_expr

   84 bit_shift_expr: bit_shift_expr "<<" arith_expr
   85               | bit_shift_expr ">>" arith_expr
   86               | bit_shift_expr "rot" arith_expr
   87               | arith_expr

   88 arith_expr: arith_expr "+" arith_term
   89           | arith_expr "-" arith_term
   90           | arith_term

   91 arith_term: arith_term "*" factor
   92           | arith_term "/" factor
   93           | arith_term "%" factor
   94           | factor

   95 factor: '!' factor
   96       | lvalue
   97       | method_name '(' opt_method_call_argument_list ')'
   98       | constant
   99       | '(' expr ')'

  100 constant: "constante entera"
  101         | "constante caracter"
  102         | bool_constant

  103 bool_constant: "'true'"
  104              | "'false'"


Terminals, with rules where they appear

$end (0) 0
'!' (33) 95
'(' (40) 19 44 61 64 65 97 99
')' (41) 19 44 61 64 65 97 99
',' (44) 13 24 50 52 56 66
';' (59) 12 34 35 39 40 41 65
'=' (61) 17 43
'[' (91) 16 59
']' (93) 16 59
'{' (123) 2 27
'}' (125) 2 27
error (256)
"'identificador'" (258) 11 15 16 19 26 47 58
"'class'" (259) 2
"'break'" (260) 69
"'continue'" (261) 70
"'while'" (262) 64
"'for'" (263) 65
"'if'" (264) 61
"'else'" (265) 62
"'return'" (266) 68
"'read'" (267) 46
"'print'" (268) 45
"'true'" (269) 103
"'false'" (270) 104
"'int'" (271) 30
"'void'" (272) 21
"'boolean'" (273) 31
"operador booleano 'or'" (274) 73
"operador booleano 'and'" (275) 75
"<<" (276) 84
">>" (277) 85
"rot" (278) 86
">" (279) 77
"<" (280) 78
">=" (281) 79
"<=" (282) 80
"==" (283) 81
"!=" (284) 82
"+" (285) 88
"-" (286) 89
"*" (287) 91
"/" (288) 92
"%" (289) 93
"constante caracter" (290) 101
"constante entera" (291) 16 100
"constante real" (292)
"constante de cadena" (293) 54


Nonterminals, with rules where they appear

$accept (49)
    on left: 0
program (50)
    on left: 1, on right: 0
class_def (51)
    on left: 2, on right: 1
optional_field_decl_list (52)
    on left: 3 4, on right: 2
optional_method_decl_list (53)
    on left: 5 6, on right: 2
field_decl_list (54)
    on left: 7 8, on right: 3 7
method_decl_list (55)
    on left: 9 10, on right: 5 9
class_name (56)
    on left: 11, on right: 2
field_decl (57)
    on left: 12, on right: 7 8
var_list (58)
    on left: 13 14, on right: 12 13
var (59)
    on left: 15 16, on right: 13 14
optional_initialization (60)
    on left: 17 18, on right: 15
method_decl (61)
    on left: 19, on right: 9 10
return_type (62)
    on left: 20 21, on right: 19
opt_parameter_decl_list (63)
    on left: 22 23, on right: 19
parameter_decl_list (64)
    on left: 24 25, on right: 22 24
parameter_decl (65)
    on left: 26, on right: 24 25
block (66)
    on left: 27, on right: 19 42 61 62 64 65
opt_statement_list (67)
    on left: 28 29, on right: 27
type (68)
    on left: 30 31, on right: 12 20 26
statement_list (69)
    on left: 32 33, on right: 28 32
statement (70)
    on left: 34 35 36 37 38 39 40 41 42, on right: 32 33
assign (71)
    on left: 43, on right: 34 66 67
method_call (72)
    on left: 44 45 46, on right: 35
method_name (73)
    on left: 47, on right: 44 97
opt_method_call_argument_list (74)
    on left: 48 49, on right: 44 97
method_call_argument_list (75)
    on left: 50 51, on right: 48 50
print_argument_list (76)
    on left: 52 53, on right: 45 52
print_argument (77)
    on left: 54 55, on right: 52 53
read_argument_list (78)
    on left: 56 57, on right: 46 56
lvalue (79)
    on left: 58, on right: 43 56 57 96
opt_array_dimension (80)
    on left: 59 60, on right: 58
if_statement (81)
    on left: 61, on right: 36
opt_else (82)
    on left: 62 63, on right: 61
while_statement (83)
    on left: 64, on right: 37
for_statement (84)
    on left: 65, on right: 38
for_assignment_list (85)
    on left: 66 67, on right: 65 66
return_statement (86)
    on left: 68, on right: 39
break_statement (87)
    on left: 69, on right: 40
continue_statement (88)
    on left: 70, on right: 41
opt_expr (89)
    on left: 71 72, on right: 68
expr (90)
    on left: 73 74, on right: 43 50 51 55 59 61 64 65 71 73 99
bool_term (91)
    on left: 75 76, on right: 73 74 75
relational_expr (92)
    on left: 77 78 79 80 81 82 83, on right: 75 76 77 78 79 80 81 82
bit_shift_expr (93)
    on left: 84 85 86 87, on right: 77 78 79 80 81 82 83 84 85 86
arith_expr (94)
    on left: 88 89 90, on right: 84 85 86 87 88 89
arith_term (95)
    on left: 91 92 93 94, on right: 88 89 90 91 92 93
factor (96)
    on left: 95 96 97 98 99, on right: 91 92 93 94 95
constant (97)
    on left: 100 101 102, on right: 17 98
bool_constant (98)
    on left: 103 104, on right: 102


state 0

    0 $accept: . program $end
    1 program: . class_def
    2 class_def: . "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}'

    "'class'"  shift, and go to state 1

    program    go to state 2
    class_def  go to state 3


state 1

    2 class_def: "'class'" . class_name '{' optional_field_decl_list optional_method_decl_list '}'
   11 class_name: . "'identificador'"

    "'identificador'"  shift, and go to state 4

    class_name  go to state 5


state 2

    0 $accept: program . $end

    $end  shift, and go to state 6


state 3

    1 program: class_def .

    $default  reduce using rule 1 (program)


state 4

   11 class_name: "'identificador'" .

    $default  reduce using rule 11 (class_name)


state 5

    2 class_def: "'class'" class_name . '{' optional_field_decl_list optional_method_decl_list '}'

    '{'  shift, and go to state 7


state 6

    0 $accept: program $end .

    $default  accept


state 7

    2 class_def: "'class'" class_name '{' . optional_field_decl_list optional_method_decl_list '}'
    3 optional_field_decl_list: . field_decl_list
    4                         | .  ["'int'", "'void'", "'boolean'", '}']
    7 field_decl_list: . field_decl_list field_decl
    8                | . field_decl
   12 field_decl: . type var_list ';'
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    "'int'"      [reduce using rule 4 (optional_field_decl_list)]
    "'boolean'"  [reduce using rule 4 (optional_field_decl_list)]
    $default     reduce using rule 4 (optional_field_decl_list)

    optional_field_decl_list  go to state 10
    field_decl_list           go to state 11
    field_decl                go to state 12
    type                      go to state 13


state 8

   30 type: "'int'" .

    $default  reduce using rule 30 (type)


state 9

   31 type: "'boolean'" .

    $default  reduce using rule 31 (type)


state 10

    2 class_def: "'class'" class_name '{' optional_field_decl_list . optional_method_decl_list '}'
    5 optional_method_decl_list: . method_decl_list
    6                          | .  ['}']
    9 method_decl_list: . method_decl_list method_decl
   10                 | . method_decl
   19 method_decl: . return_type "'identificador'" '(' opt_parameter_decl_list ')' block
   20 return_type: . type
   21            | . "'void'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'void'"     shift, and go to state 14
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 6 (optional_method_decl_list)

    optional_method_decl_list  go to state 15
    method_decl_list           go to state 16
    method_decl                go to state 17
    return_type                go to state 18
    type                       go to state 19


state 11

    3 optional_field_decl_list: field_decl_list .  ["'int'", "'void'", "'boolean'", '}']
    7 field_decl_list: field_decl_list . field_decl
   12 field_decl: . type var_list ';'
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    "'int'"      [reduce using rule 3 (optional_field_decl_list)]
    "'boolean'"  [reduce using rule 3 (optional_field_decl_list)]
    $default     reduce using rule 3 (optional_field_decl_list)

    field_decl  go to state 20
    type        go to state 13


state 12

    8 field_decl_list: field_decl .

    $default  reduce using rule 8 (field_decl_list)


state 13

   12 field_decl: type . var_list ';'
   13 var_list: . var_list ',' var
   14         | . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'

    "'identificador'"  shift, and go to state 21

    var_list  go to state 22
    var       go to state 23


state 14

   21 return_type: "'void'" .

    $default  reduce using rule 21 (return_type)


state 15

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list . '}'

    '}'  shift, and go to state 24


state 16

    5 optional_method_decl_list: method_decl_list .  ['}']
    9 method_decl_list: method_decl_list . method_decl
   19 method_decl: . return_type "'identificador'" '(' opt_parameter_decl_list ')' block
   20 return_type: . type
   21            | . "'void'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'void'"     shift, and go to state 14
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 5 (optional_method_decl_list)

    method_decl  go to state 25
    return_type  go to state 18
    type         go to state 19


state 17

   10 method_decl_list: method_decl .

    $default  reduce using rule 10 (method_decl_list)


state 18

   19 method_decl: return_type . "'identificador'" '(' opt_parameter_decl_list ')' block

    "'identificador'"  shift, and go to state 26


state 19

   20 return_type: type .

    $default  reduce using rule 20 (return_type)


state 20

    7 field_decl_list: field_decl_list field_decl .

    $default  reduce using rule 7 (field_decl_list)


state 21

   15 var: "'identificador'" . optional_initialization
   16    | "'identificador'" . '[' "constante entera" ']'
   17 optional_initialization: . '=' constant
   18                        | .  [';', ',']

    '['  shift, and go to state 27
    '='  shift, and go to state 28

    $default  reduce using rule 18 (optional_initialization)

    optional_initialization  go to state 29


state 22

   12 field_decl: type var_list . ';'
   13 var_list: var_list . ',' var

    ';'  shift, and go to state 30
    ','  shift, and go to state 31


state 23

   14 var_list: var .

    $default  reduce using rule 14 (var_list)


state 24

    2 class_def: "'class'" class_name '{' optional_field_decl_list optional_method_decl_list '}' .

    $default  reduce using rule 2 (class_def)


state 25

    9 method_decl_list: method_decl_list method_decl .

    $default  reduce using rule 9 (method_decl_list)


state 26

   19 method_decl: return_type "'identificador'" . '(' opt_parameter_decl_list ')' block

    '('  shift, and go to state 32


state 27

   16 var: "'identificador'" '[' . "constante entera" ']'

    "constante entera"  shift, and go to state 33


state 28

   17 optional_initialization: '=' . constant
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37

    constant       go to state 38
    bool_constant  go to state 39


state 29

   15 var: "'identificador'" optional_initialization .

    $default  reduce using rule 15 (var)


state 30

   12 field_decl: type var_list ';' .

    $default  reduce using rule 12 (field_decl)


state 31

   13 var_list: var_list ',' . var
   15 var: . "'identificador'" optional_initialization
   16    | . "'identificador'" '[' "constante entera" ']'

    "'identificador'"  shift, and go to state 21

    var  go to state 40


state 32

   19 method_decl: return_type "'identificador'" '(' . opt_parameter_decl_list ')' block
   22 opt_parameter_decl_list: . parameter_decl_list
   23                        | .  [')']
   24 parameter_decl_list: . parameter_decl_list ',' parameter_decl
   25                    | . parameter_decl
   26 parameter_decl: . type "'identificador'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    $default  reduce using rule 23 (opt_parameter_decl_list)

    opt_parameter_decl_list  go to state 41
    parameter_decl_list      go to state 42
    parameter_decl           go to state 43
    type                     go to state 44


state 33

   16 var: "'identificador'" '[' "constante entera" . ']'

    ']'  shift, and go to state 45


state 34

  103 bool_constant: "'true'" .

    $default  reduce using rule 103 (bool_constant)


state 35

  104 bool_constant: "'false'" .

    $default  reduce using rule 104 (bool_constant)


state 36

  101 constant: "constante caracter" .

    $default  reduce using rule 101 (constant)


state 37

  100 constant: "constante entera" .

    $default  reduce using rule 100 (constant)


state 38

   17 optional_initialization: '=' constant .

    $default  reduce using rule 17 (optional_initialization)


state 39

  102 constant: bool_constant .

    $default  reduce using rule 102 (constant)


state 40

   13 var_list: var_list ',' var .

    $default  reduce using rule 13 (var_list)


state 41

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list . ')' block

    ')'  shift, and go to state 46


state 42

   22 opt_parameter_decl_list: parameter_decl_list .  [')']
   24 parameter_decl_list: parameter_decl_list . ',' parameter_decl

    ','  shift, and go to state 47

    $default  reduce using rule 22 (opt_parameter_decl_list)


state 43

   25 parameter_decl_list: parameter_decl .

    $default  reduce using rule 25 (parameter_decl_list)


state 44

   26 parameter_decl: type . "'identificador'"

    "'identificador'"  shift, and go to state 48


state 45

   16 var: "'identificador'" '[' "constante entera" ']' .

    $default  reduce using rule 16 (var)


state 46

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' . block
   27 block: . '{' opt_statement_list '}'

    '{'  shift, and go to state 49

    block  go to state 50


state 47

   24 parameter_decl_list: parameter_decl_list ',' . parameter_decl
   26 parameter_decl: . type "'identificador'"
   30 type: . "'int'"
   31     | . "'boolean'"

    "'int'"      shift, and go to state 8
    "'boolean'"  shift, and go to state 9

    parameter_decl  go to state 51
    type            go to state 44


state 48

   26 parameter_decl: type "'identificador'" .

    $default  reduce using rule 26 (parameter_decl)


state 49

   27 block: . '{' opt_statement_list '}'
   27      | '{' . opt_statement_list '}'
   28 opt_statement_list: . statement_list
   29                   | .  ['}']
   32 statement_list: . statement_list statement
   33               | . statement
   34 statement: . assign ';'
   35          | . method_call ';'
   36          | . if_statement
   37          | . while_statement
   38          | . for_statement
   39          | . return_statement ';'
   40          | . break_statement ';'
   41          | . continue_statement ';'
   42          | . block
   43 assign: . lvalue '=' expr
   44 method_call: . method_name '(' opt_method_call_argument_list ')'
   45            | . "'print'" print_argument_list
   46            | . "'read'" read_argument_list
   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   61 if_statement: . "'if'" '(' expr ')' block opt_else
   64 while_statement: . "'while'" '(' expr ')' block
   65 for_statement: . "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block
   68 return_statement: . "'return'" opt_expr
   69 break_statement: . "'break'"
   70 continue_statement: . "'continue'"

    "'identificador'"  shift, and go to state 52
    "'break'"          shift, and go to state 53
    "'continue'"       shift, and go to state 54
    "'while'"          shift, and go to state 55
    "'for'"            shift, and go to state 56
    "'if'"             shift, and go to state 57
    "'return'"         shift, and go to state 58
    "'read'"           shift, and go to state 59
    "'print'"          shift, and go to state 60
    '{'                shift, and go to state 49

    $default  reduce using rule 29 (opt_statement_list)

    block               go to state 61
    opt_statement_list  go to state 62
    statement_list      go to state 63
    statement           go to state 64
    assign              go to state 65
    method_call         go to state 66
    method_name         go to state 67
    lvalue              go to state 68
    if_statement        go to state 69
    while_statement     go to state 70
    for_statement       go to state 71
    return_statement    go to state 72
    break_statement     go to state 73
    continue_statement  go to state 74


state 50

   19 method_decl: return_type "'identificador'" '(' opt_parameter_decl_list ')' block .

    $default  reduce using rule 19 (method_decl)


state 51

   24 parameter_decl_list: parameter_decl_list ',' parameter_decl .

    $default  reduce using rule 24 (parameter_decl_list)


state 52

   47 method_name: "'identificador'" .  ['(']
   58 lvalue: "'identificador'" . opt_array_dimension
   59 opt_array_dimension: . '[' expr ']'
   60                    | .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", "+", "-", "*", "/", "%", ';', ',', ']', '=', ')']

    '['  shift, and go to state 75

    '('       reduce using rule 47 (method_name)
    $default  reduce using rule 60 (opt_array_dimension)

    opt_array_dimension  go to state 76


state 53

   69 break_statement: "'break'" .

    $default  reduce using rule 69 (break_statement)


state 54

   70 continue_statement: "'continue'" .

    $default  reduce using rule 70 (continue_statement)


state 55

   64 while_statement: "'while'" . '(' expr ')' block

    '('  shift, and go to state 77


state 56

   65 for_statement: "'for'" . '(' for_assignment_list ';' expr ';' for_assignment_list ')' block

    '('  shift, and go to state 78


state 57

   61 if_statement: "'if'" . '(' expr ')' block opt_else

    '('  shift, and go to state 79


state 58

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   68 return_statement: "'return'" . opt_expr
   71 opt_expr: . expr
   72         | .  [';']
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    $default  reduce using rule 72 (opt_expr)

    method_name      go to state 82
    lvalue           go to state 83
    opt_expr         go to state 84
    expr             go to state 85
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 59

   46 method_call: "'read'" . read_argument_list
   56 read_argument_list: . read_argument_list ',' lvalue
   57                   | . lvalue
   58 lvalue: . "'identificador'" opt_array_dimension

    "'identificador'"  shift, and go to state 93

    read_argument_list  go to state 94
    lvalue              go to state 95


state 60

   45 method_call: "'print'" . print_argument_list
   47 method_name: . "'identificador'"
   52 print_argument_list: . print_argument_list ',' print_argument
   53                    | . print_argument
   54 print_argument: . "constante de cadena"
   55               | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"      shift, and go to state 52
    "'true'"               shift, and go to state 34
    "'false'"              shift, and go to state 35
    "constante caracter"   shift, and go to state 36
    "constante entera"     shift, and go to state 37
    "constante de cadena"  shift, and go to state 96
    '('                    shift, and go to state 80
    '!'                    shift, and go to state 81

    method_name          go to state 82
    print_argument_list  go to state 97
    print_argument       go to state 98
    lvalue               go to state 83
    expr                 go to state 99
    bool_term            go to state 86
    relational_expr      go to state 87
    bit_shift_expr       go to state 88
    arith_expr           go to state 89
    arith_term           go to state 90
    factor               go to state 91
    constant             go to state 92
    bool_constant        go to state 39


state 61

   42 statement: block .

    $default  reduce using rule 42 (statement)


state 62

   27 block: '{' opt_statement_list . '}'

    '}'  shift, and go to state 100


state 63

   27 block: . '{' opt_statement_list '}'
   28 opt_statement_list: statement_list .  ['}']
   32 statement_list: statement_list . statement
   34 statement: . assign ';'
   35          | . method_call ';'
   36          | . if_statement
   37          | . while_statement
   38          | . for_statement
   39          | . return_statement ';'
   40          | . break_statement ';'
   41          | . continue_statement ';'
   42          | . block
   43 assign: . lvalue '=' expr
   44 method_call: . method_name '(' opt_method_call_argument_list ')'
   45            | . "'print'" print_argument_list
   46            | . "'read'" read_argument_list
   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   61 if_statement: . "'if'" '(' expr ')' block opt_else
   64 while_statement: . "'while'" '(' expr ')' block
   65 for_statement: . "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block
   68 return_statement: . "'return'" opt_expr
   69 break_statement: . "'break'"
   70 continue_statement: . "'continue'"

    "'identificador'"  shift, and go to state 52
    "'break'"          shift, and go to state 53
    "'continue'"       shift, and go to state 54
    "'while'"          shift, and go to state 55
    "'for'"            shift, and go to state 56
    "'if'"             shift, and go to state 57
    "'return'"         shift, and go to state 58
    "'read'"           shift, and go to state 59
    "'print'"          shift, and go to state 60
    '{'                shift, and go to state 49

    $default  reduce using rule 28 (opt_statement_list)

    block               go to state 61
    statement           go to state 101
    assign              go to state 65
    method_call         go to state 66
    method_name         go to state 67
    lvalue              go to state 68
    if_statement        go to state 69
    while_statement     go to state 70
    for_statement       go to state 71
    return_statement    go to state 72
    break_statement     go to state 73
    continue_statement  go to state 74


state 64

   33 statement_list: statement .

    $default  reduce using rule 33 (statement_list)


state 65

   34 statement: assign . ';'

    ';'  shift, and go to state 102


state 66

   35 statement: method_call . ';'

    ';'  shift, and go to state 103


state 67

   44 method_call: method_name . '(' opt_method_call_argument_list ')'

    '('  shift, and go to state 104


state 68

   43 assign: lvalue . '=' expr

    '='  shift, and go to state 105


state 69

   36 statement: if_statement .

    $default  reduce using rule 36 (statement)


state 70

   37 statement: while_statement .

    $default  reduce using rule 37 (statement)


state 71

   38 statement: for_statement .

    $default  reduce using rule 38 (statement)


state 72

   39 statement: return_statement . ';'

    ';'  shift, and go to state 106


state 73

   40 statement: break_statement . ';'

    ';'  shift, and go to state 107


state 74

   41 statement: continue_statement . ';'

    ';'  shift, and go to state 108


state 75

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   59 opt_array_dimension: '[' . expr ']'
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 109
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 76

   58 lvalue: "'identificador'" opt_array_dimension .

    $default  reduce using rule 58 (lvalue)


state 77

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   64 while_statement: "'while'" '(' . expr ')' block
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 110
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 78

   43 assign: . lvalue '=' expr
   58 lvalue: . "'identificador'" opt_array_dimension
   65 for_statement: "'for'" '(' . for_assignment_list ';' expr ';' for_assignment_list ')' block
   66 for_assignment_list: . for_assignment_list ',' assign
   67                    | . assign

    "'identificador'"  shift, and go to state 93

    assign               go to state 111
    lvalue               go to state 68
    for_assignment_list  go to state 112


state 79

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   61 if_statement: "'if'" '(' . expr ')' block opt_else
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 113
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 80

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
   99       | '(' . expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 114
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 81

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   95 factor: . '!' factor
   95       | '!' . factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    factor         go to state 115
    constant       go to state 92
    bool_constant  go to state 39


state 82

   97 factor: method_name . '(' opt_method_call_argument_list ')'

    '('  shift, and go to state 116


state 83

   96 factor: lvalue .

    $default  reduce using rule 96 (factor)


state 84

   68 return_statement: "'return'" opt_expr .

    $default  reduce using rule 68 (return_statement)


state 85

   71 opt_expr: expr .  [';']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117

    $default  reduce using rule 71 (opt_expr)


state 86

   74 expr: bool_term .  ["operador booleano 'or'", ';', ',', ']', ')']
   75 bool_term: bool_term . "operador booleano 'and'" relational_expr

    "operador booleano 'and'"  shift, and go to state 118

    $default  reduce using rule 74 (expr)


state 87

   76 bool_term: relational_expr .  ["operador booleano 'or'", "operador booleano 'and'", ';', ',', ']', ')']
   77 relational_expr: relational_expr . ">" bit_shift_expr
   78                | relational_expr . "<" bit_shift_expr
   79                | relational_expr . ">=" bit_shift_expr
   80                | relational_expr . "<=" bit_shift_expr
   81                | relational_expr . "==" bit_shift_expr
   82                | relational_expr . "!=" bit_shift_expr

    ">"   shift, and go to state 119
    "<"   shift, and go to state 120
    ">="  shift, and go to state 121
    "<="  shift, and go to state 122
    "=="  shift, and go to state 123
    "!="  shift, and go to state 124

    $default  reduce using rule 76 (bool_term)


state 88

   83 relational_expr: bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 83 (relational_expr)


state 89

   87 bit_shift_expr: arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   88 arith_expr: arith_expr . "+" arith_term
   89           | arith_expr . "-" arith_term

    "+"  shift, and go to state 128
    "-"  shift, and go to state 129

    $default  reduce using rule 87 (bit_shift_expr)


state 90

   90 arith_expr: arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", "+", "-", ';', ',', ']', ')']
   91 arith_term: arith_term . "*" factor
   92           | arith_term . "/" factor
   93           | arith_term . "%" factor

    "*"  shift, and go to state 130
    "/"  shift, and go to state 131
    "%"  shift, and go to state 132

    $default  reduce using rule 90 (arith_expr)


state 91

   94 arith_term: factor .

    $default  reduce using rule 94 (arith_term)


state 92

   98 factor: constant .

    $default  reduce using rule 98 (factor)


state 93

   58 lvalue: "'identificador'" . opt_array_dimension
   59 opt_array_dimension: . '[' expr ']'
   60                    | .  [';', ',', '=']

    '['  shift, and go to state 75

    $default  reduce using rule 60 (opt_array_dimension)

    opt_array_dimension  go to state 76


state 94

   46 method_call: "'read'" read_argument_list .  [';']
   56 read_argument_list: read_argument_list . ',' lvalue

    ','  shift, and go to state 133

    $default  reduce using rule 46 (method_call)


state 95

   57 read_argument_list: lvalue .

    $default  reduce using rule 57 (read_argument_list)


state 96

   54 print_argument: "constante de cadena" .

    $default  reduce using rule 54 (print_argument)


state 97

   45 method_call: "'print'" print_argument_list .  [';']
   52 print_argument_list: print_argument_list . ',' print_argument

    ','  shift, and go to state 134

    $default  reduce using rule 45 (method_call)


state 98

   53 print_argument_list: print_argument .

    $default  reduce using rule 53 (print_argument_list)


state 99

   55 print_argument: expr .  [';', ',']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117

    $default  reduce using rule 55 (print_argument)


state 100

   27 block: '{' opt_statement_list '}' .

    $default  reduce using rule 27 (block)


state 101

   32 statement_list: statement_list statement .

    $default  reduce using rule 32 (statement_list)


state 102

   34 statement: assign ';' .

    $default  reduce using rule 34 (statement)


state 103

   35 statement: method_call ';' .

    $default  reduce using rule 35 (statement)


state 104

   44 method_call: method_name '(' . opt_method_call_argument_list ')'
   47 method_name: . "'identificador'"
   48 opt_method_call_argument_list: . method_call_argument_list
   49                              | .  [')']
   50 method_call_argument_list: . method_call_argument_list ',' expr
   51                          | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    $default  reduce using rule 49 (opt_method_call_argument_list)

    method_name                    go to state 82
    opt_method_call_argument_list  go to state 135
    method_call_argument_list      go to state 136
    lvalue                         go to state 83
    expr                           go to state 137
    bool_term                      go to state 86
    relational_expr                go to state 87
    bit_shift_expr                 go to state 88
    arith_expr                     go to state 89
    arith_term                     go to state 90
    factor                         go to state 91
    constant                       go to state 92
    bool_constant                  go to state 39


state 105

   43 assign: lvalue '=' . expr
   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 138
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 106

   39 statement: return_statement ';' .

    $default  reduce using rule 39 (statement)


state 107

   40 statement: break_statement ';' .

    $default  reduce using rule 40 (statement)


state 108

   41 statement: continue_statement ';' .

    $default  reduce using rule 41 (statement)


state 109

   59 opt_array_dimension: '[' expr . ']'
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117
    ']'                       shift, and go to state 139


state 110

   64 while_statement: "'while'" '(' expr . ')' block
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117
    ')'                       shift, and go to state 140


state 111

   67 for_assignment_list: assign .

    $default  reduce using rule 67 (for_assignment_list)


state 112

   65 for_statement: "'for'" '(' for_assignment_list . ';' expr ';' for_assignment_list ')' block
   66 for_assignment_list: for_assignment_list . ',' assign

    ';'  shift, and go to state 141
    ','  shift, and go to state 142


state 113

   61 if_statement: "'if'" '(' expr . ')' block opt_else
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117
    ')'                       shift, and go to state 143


state 114

   73 expr: expr . "operador booleano 'or'" bool_term
   99 factor: '(' expr . ')'

    "operador booleano 'or'"  shift, and go to state 117
    ')'                       shift, and go to state 144


state 115

   95 factor: '!' factor .

    $default  reduce using rule 95 (factor)


state 116

   47 method_name: . "'identificador'"
   48 opt_method_call_argument_list: . method_call_argument_list
   49                              | .  [')']
   50 method_call_argument_list: . method_call_argument_list ',' expr
   51                          | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   97       | method_name '(' . opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    $default  reduce using rule 49 (opt_method_call_argument_list)

    method_name                    go to state 82
    opt_method_call_argument_list  go to state 145
    method_call_argument_list      go to state 136
    lvalue                         go to state 83
    expr                           go to state 137
    bool_term                      go to state 86
    relational_expr                go to state 87
    bit_shift_expr                 go to state 88
    arith_expr                     go to state 89
    arith_term                     go to state 90
    factor                         go to state 91
    constant                       go to state 92
    bool_constant                  go to state 39


state 117

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: expr "operador booleano 'or'" . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    bool_term        go to state 146
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 118

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   75 bool_term: bool_term "operador booleano 'and'" . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    relational_expr  go to state 147
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 119

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   77 relational_expr: relational_expr ">" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name     go to state 82
    lvalue          go to state 83
    bit_shift_expr  go to state 148
    arith_expr      go to state 89
    arith_term      go to state 90
    factor          go to state 91
    constant        go to state 92
    bool_constant   go to state 39


state 120

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   78 relational_expr: relational_expr "<" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name     go to state 82
    lvalue          go to state 83
    bit_shift_expr  go to state 149
    arith_expr      go to state 89
    arith_term      go to state 90
    factor          go to state 91
    constant        go to state 92
    bool_constant   go to state 39


state 121

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   79 relational_expr: relational_expr ">=" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name     go to state 82
    lvalue          go to state 83
    bit_shift_expr  go to state 150
    arith_expr      go to state 89
    arith_term      go to state 90
    factor          go to state 91
    constant        go to state 92
    bool_constant   go to state 39


state 122

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   80 relational_expr: relational_expr "<=" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name     go to state 82
    lvalue          go to state 83
    bit_shift_expr  go to state 151
    arith_expr      go to state 89
    arith_term      go to state 90
    factor          go to state 91
    constant        go to state 92
    bool_constant   go to state 39


state 123

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   81 relational_expr: relational_expr "==" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name     go to state 82
    lvalue          go to state 83
    bit_shift_expr  go to state 152
    arith_expr      go to state 89
    arith_term      go to state 90
    factor          go to state 91
    constant        go to state 92
    bool_constant   go to state 39


state 124

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   82 relational_expr: relational_expr "!=" . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name     go to state 82
    lvalue          go to state 83
    bit_shift_expr  go to state 153
    arith_expr      go to state 89
    arith_term      go to state 90
    factor          go to state 91
    constant        go to state 92
    bool_constant   go to state 39


state 125

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   84 bit_shift_expr: bit_shift_expr "<<" . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    arith_expr     go to state 154
    arith_term     go to state 90
    factor         go to state 91
    constant       go to state 92
    bool_constant  go to state 39


state 126

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   85 bit_shift_expr: bit_shift_expr ">>" . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    arith_expr     go to state 155
    arith_term     go to state 90
    factor         go to state 91
    constant       go to state 92
    bool_constant  go to state 39


state 127

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   86 bit_shift_expr: bit_shift_expr "rot" . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    arith_expr     go to state 156
    arith_term     go to state 90
    factor         go to state 91
    constant       go to state 92
    bool_constant  go to state 39


state 128

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   88 arith_expr: arith_expr "+" . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    arith_term     go to state 157
    factor         go to state 91
    constant       go to state 92
    bool_constant  go to state 39


state 129

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   89 arith_expr: arith_expr "-" . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    arith_term     go to state 158
    factor         go to state 91
    constant       go to state 92
    bool_constant  go to state 39


state 130

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   91 arith_term: arith_term "*" . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    factor         go to state 159
    constant       go to state 92
    bool_constant  go to state 39


state 131

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   92 arith_term: arith_term "/" . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    factor         go to state 160
    constant       go to state 92
    bool_constant  go to state 39


state 132

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   93 arith_term: arith_term "%" . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name    go to state 82
    lvalue         go to state 83
    factor         go to state 161
    constant       go to state 92
    bool_constant  go to state 39


state 133

   56 read_argument_list: read_argument_list ',' . lvalue
   58 lvalue: . "'identificador'" opt_array_dimension

    "'identificador'"  shift, and go to state 93

    lvalue  go to state 162


state 134

   47 method_name: . "'identificador'"
   52 print_argument_list: print_argument_list ',' . print_argument
   54 print_argument: . "constante de cadena"
   55               | . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"      shift, and go to state 52
    "'true'"               shift, and go to state 34
    "'false'"              shift, and go to state 35
    "constante caracter"   shift, and go to state 36
    "constante entera"     shift, and go to state 37
    "constante de cadena"  shift, and go to state 96
    '('                    shift, and go to state 80
    '!'                    shift, and go to state 81

    method_name      go to state 82
    print_argument   go to state 163
    lvalue           go to state 83
    expr             go to state 99
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 135

   44 method_call: method_name '(' opt_method_call_argument_list . ')'

    ')'  shift, and go to state 164


state 136

   48 opt_method_call_argument_list: method_call_argument_list .  [')']
   50 method_call_argument_list: method_call_argument_list . ',' expr

    ','  shift, and go to state 165

    $default  reduce using rule 48 (opt_method_call_argument_list)


state 137

   51 method_call_argument_list: expr .  [',', ')']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117

    $default  reduce using rule 51 (method_call_argument_list)


state 138

   43 assign: lvalue '=' expr .  [';', ',', ')']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117

    $default  reduce using rule 43 (assign)


state 139

   59 opt_array_dimension: '[' expr ']' .

    $default  reduce using rule 59 (opt_array_dimension)


state 140

   27 block: . '{' opt_statement_list '}'
   64 while_statement: "'while'" '(' expr ')' . block

    '{'  shift, and go to state 49

    block  go to state 166


state 141

   47 method_name: . "'identificador'"
   58 lvalue: . "'identificador'" opt_array_dimension
   65 for_statement: "'for'" '(' for_assignment_list ';' . expr ';' for_assignment_list ')' block
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 167
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 142

   43 assign: . lvalue '=' expr
   58 lvalue: . "'identificador'" opt_array_dimension
   66 for_assignment_list: for_assignment_list ',' . assign

    "'identificador'"  shift, and go to state 93

    assign  go to state 168
    lvalue  go to state 68


state 143

   27 block: . '{' opt_statement_list '}'
   61 if_statement: "'if'" '(' expr ')' . block opt_else

    '{'  shift, and go to state 49

    block  go to state 169


state 144

   99 factor: '(' expr ')' .

    $default  reduce using rule 99 (factor)


state 145

   97 factor: method_name '(' opt_method_call_argument_list . ')'

    ')'  shift, and go to state 170


state 146

   73 expr: expr "operador booleano 'or'" bool_term .  ["operador booleano 'or'", ';', ',', ']', ')']
   75 bool_term: bool_term . "operador booleano 'and'" relational_expr

    "operador booleano 'and'"  shift, and go to state 118

    $default  reduce using rule 73 (expr)


state 147

   75 bool_term: bool_term "operador booleano 'and'" relational_expr .  ["operador booleano 'or'", "operador booleano 'and'", ';', ',', ']', ')']
   77 relational_expr: relational_expr . ">" bit_shift_expr
   78                | relational_expr . "<" bit_shift_expr
   79                | relational_expr . ">=" bit_shift_expr
   80                | relational_expr . "<=" bit_shift_expr
   81                | relational_expr . "==" bit_shift_expr
   82                | relational_expr . "!=" bit_shift_expr

    ">"   shift, and go to state 119
    "<"   shift, and go to state 120
    ">="  shift, and go to state 121
    "<="  shift, and go to state 122
    "=="  shift, and go to state 123
    "!="  shift, and go to state 124

    $default  reduce using rule 75 (bool_term)


state 148

   77 relational_expr: relational_expr ">" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 77 (relational_expr)


state 149

   78 relational_expr: relational_expr "<" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 78 (relational_expr)


state 150

   79 relational_expr: relational_expr ">=" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 79 (relational_expr)


state 151

   80 relational_expr: relational_expr "<=" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 80 (relational_expr)


state 152

   81 relational_expr: relational_expr "==" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 81 (relational_expr)


state 153

   82 relational_expr: relational_expr "!=" bit_shift_expr .  ["operador booleano 'or'", "operador booleano 'and'", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   84 bit_shift_expr: bit_shift_expr . "<<" arith_expr
   85               | bit_shift_expr . ">>" arith_expr
   86               | bit_shift_expr . "rot" arith_expr

    "<<"   shift, and go to state 125
    ">>"   shift, and go to state 126
    "rot"  shift, and go to state 127

    $default  reduce using rule 82 (relational_expr)


state 154

   84 bit_shift_expr: bit_shift_expr "<<" arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   88 arith_expr: arith_expr . "+" arith_term
   89           | arith_expr . "-" arith_term

    "+"  shift, and go to state 128
    "-"  shift, and go to state 129

    $default  reduce using rule 84 (bit_shift_expr)


state 155

   85 bit_shift_expr: bit_shift_expr ">>" arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   88 arith_expr: arith_expr . "+" arith_term
   89           | arith_expr . "-" arith_term

    "+"  shift, and go to state 128
    "-"  shift, and go to state 129

    $default  reduce using rule 85 (bit_shift_expr)


state 156

   86 bit_shift_expr: bit_shift_expr "rot" arith_expr .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", ';', ',', ']', ')']
   88 arith_expr: arith_expr . "+" arith_term
   89           | arith_expr . "-" arith_term

    "+"  shift, and go to state 128
    "-"  shift, and go to state 129

    $default  reduce using rule 86 (bit_shift_expr)


state 157

   88 arith_expr: arith_expr "+" arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", "+", "-", ';', ',', ']', ')']
   91 arith_term: arith_term . "*" factor
   92           | arith_term . "/" factor
   93           | arith_term . "%" factor

    "*"  shift, and go to state 130
    "/"  shift, and go to state 131
    "%"  shift, and go to state 132

    $default  reduce using rule 88 (arith_expr)


state 158

   89 arith_expr: arith_expr "-" arith_term .  ["operador booleano 'or'", "operador booleano 'and'", "<<", ">>", "rot", ">", "<", ">=", "<=", "==", "!=", "+", "-", ';', ',', ']', ')']
   91 arith_term: arith_term . "*" factor
   92           | arith_term . "/" factor
   93           | arith_term . "%" factor

    "*"  shift, and go to state 130
    "/"  shift, and go to state 131
    "%"  shift, and go to state 132

    $default  reduce using rule 89 (arith_expr)


state 159

   91 arith_term: arith_term "*" factor .

    $default  reduce using rule 91 (arith_term)


state 160

   92 arith_term: arith_term "/" factor .

    $default  reduce using rule 92 (arith_term)


state 161

   93 arith_term: arith_term "%" factor .

    $default  reduce using rule 93 (arith_term)


state 162

   56 read_argument_list: read_argument_list ',' lvalue .

    $default  reduce using rule 56 (read_argument_list)


state 163

   52 print_argument_list: print_argument_list ',' print_argument .

    $default  reduce using rule 52 (print_argument_list)


state 164

   44 method_call: method_name '(' opt_method_call_argument_list ')' .

    $default  reduce using rule 44 (method_call)


state 165

   47 method_name: . "'identificador'"
   50 method_call_argument_list: method_call_argument_list ',' . expr
   58 lvalue: . "'identificador'" opt_array_dimension
   73 expr: . expr "operador booleano 'or'" bool_term
   74     | . bool_term
   75 bool_term: . bool_term "operador booleano 'and'" relational_expr
   76          | . relational_expr
   77 relational_expr: . relational_expr ">" bit_shift_expr
   78                | . relational_expr "<" bit_shift_expr
   79                | . relational_expr ">=" bit_shift_expr
   80                | . relational_expr "<=" bit_shift_expr
   81                | . relational_expr "==" bit_shift_expr
   82                | . relational_expr "!=" bit_shift_expr
   83                | . bit_shift_expr
   84 bit_shift_expr: . bit_shift_expr "<<" arith_expr
   85               | . bit_shift_expr ">>" arith_expr
   86               | . bit_shift_expr "rot" arith_expr
   87               | . arith_expr
   88 arith_expr: . arith_expr "+" arith_term
   89           | . arith_expr "-" arith_term
   90           | . arith_term
   91 arith_term: . arith_term "*" factor
   92           | . arith_term "/" factor
   93           | . arith_term "%" factor
   94           | . factor
   95 factor: . '!' factor
   96       | . lvalue
   97       | . method_name '(' opt_method_call_argument_list ')'
   98       | . constant
   99       | . '(' expr ')'
  100 constant: . "constante entera"
  101         | . "constante caracter"
  102         | . bool_constant
  103 bool_constant: . "'true'"
  104              | . "'false'"

    "'identificador'"     shift, and go to state 52
    "'true'"              shift, and go to state 34
    "'false'"             shift, and go to state 35
    "constante caracter"  shift, and go to state 36
    "constante entera"    shift, and go to state 37
    '('                   shift, and go to state 80
    '!'                   shift, and go to state 81

    method_name      go to state 82
    lvalue           go to state 83
    expr             go to state 171
    bool_term        go to state 86
    relational_expr  go to state 87
    bit_shift_expr   go to state 88
    arith_expr       go to state 89
    arith_term       go to state 90
    factor           go to state 91
    constant         go to state 92
    bool_constant    go to state 39


state 166

   64 while_statement: "'while'" '(' expr ')' block .

    $default  reduce using rule 64 (while_statement)


state 167

   65 for_statement: "'for'" '(' for_assignment_list ';' expr . ';' for_assignment_list ')' block
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117
    ';'                       shift, and go to state 172


state 168

   66 for_assignment_list: for_assignment_list ',' assign .

    $default  reduce using rule 66 (for_assignment_list)


state 169

   61 if_statement: "'if'" '(' expr ')' block . opt_else
   62 opt_else: . "'else'" block
   63         | .  ["'identificador'", "'break'", "'continue'", "'while'", "'for'", "'if'", "'return'", "'read'", "'print'", '{', '}']

    "'else'"  shift, and go to state 173

    $default  reduce using rule 63 (opt_else)

    opt_else  go to state 174


state 170

   97 factor: method_name '(' opt_method_call_argument_list ')' .

    $default  reduce using rule 97 (factor)


state 171

   50 method_call_argument_list: method_call_argument_list ',' expr .  [',', ')']
   73 expr: expr . "operador booleano 'or'" bool_term

    "operador booleano 'or'"  shift, and go to state 117

    $default  reduce using rule 50 (method_call_argument_list)


state 172

   43 assign: . lvalue '=' expr
   58 lvalue: . "'identificador'" opt_array_dimension
   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' . for_assignment_list ')' block
   66 for_assignment_list: . for_assignment_list ',' assign
   67                    | . assign

    "'identificador'"  shift, and go to state 93

    assign               go to state 111
    lvalue               go to state 68
    for_assignment_list  go to state 175


state 173

   27 block: . '{' opt_statement_list '}'
   62 opt_else: "'else'" . block

    '{'  shift, and go to state 49

    block  go to state 176


state 174

   61 if_statement: "'if'" '(' expr ')' block opt_else .

    $default  reduce using rule 61 (if_statement)


state 175

   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list . ')' block
   66 for_assignment_list: for_assignment_list . ',' assign

    ','  shift, and go to state 142
    ')'  shift, and go to state 177


state 176

   62 opt_else: "'else'" block .

    $default  reduce using rule 62 (opt_else)


state 177

   27 block: . '{' opt_statement_list '}'
   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' . block

    '{'  shift, and go to state 49

    block  go to state 178


state 178

   65 for_statement: "'for'" '(' for_assignment_list ';' expr ';' for_assignment_list ')' block .

    $default  reduce using rule 65 (for_statement)
